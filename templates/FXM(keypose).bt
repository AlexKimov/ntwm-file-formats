//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


typedef struct {
  UINT Length;
  CHAR Text[Length];
} CSTRING;

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
  FLOAT w;
} VECTOR_4F; 

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
} VECTOR_3F;

typedef struct {
  VECTOR_4F XAxis;
  VECTOR_4F YAxis;
  VECTOR_4F ZAxis;
  VECTOR_4F Position;
} MATRIX4x4;

typedef struct {     
  FLOAT x;
  FLOAT y;
} VECTOR_2F; 

typedef struct {     
  UINT16 x;
  UINT16 y;
  UINT16 z;
} VECTOR_SHORT; 

typedef struct {
  VECTOR_3F Coordinates;
  VECTOR_3F Normal;
  VECTOR_2F UV;
} VERTEX;

//---------------------------------

struct {
  UINT Unknown;
  UINT Unknown;
  UINT BoneCount;
} HEADER;

typedef struct {
  UINT Unknown;
  UINT Unknown;
  CSTRING Name; 
  INT ParentIndex;
  MATRIX4x4 Matrix;
} BONE <name=getName>;

string getName(BONE &bone) {
  return bone.Name.Text; 
}

struct {
  BONE Bone[HEADER.BoneCount] <optimize=false>;
} BONES;

if (HEADER.BoneCount != 0)
  BYTE Data[44];
else
  BYTE Data[32];

UINT Count;
CSTRING Name; 

UINT Unknown;
UINT Unknown;
UINT Unknown;

UINT Unknown;
UINT Unknown;
UINT Unknown;
UINT FaceCount;
UINT VertexCount;

VECTOR_SHORT FaceIndexes1[FaceCount];
VERTEX Vertex[VertexCount];

if (HEADER.BoneCount != 0)
struct {
  VECTOR_3F Coordinates;  
  UBYTE WeightCount;
  UBYTE Unknown;
  UBYTE Unknown;
  UBYTE Unknown;

  FLOAT VertexWeight1;
  FLOAT VertexWeight2;
  FLOAT VertexWeight2;
  FLOAT VertexWeight3;

  UBYTE BoneIndex1;
  if (BoneIndex1 == 255)
    klugjlkg();    
  UBYTE BoneIndex2; 
  UBYTE BoneIndex3; 
  UBYTE BoneIndex4;   

  VECTOR_3F Normal;
  VECTOR_2F UV;
} VERTEX_DATA[VertexCount] <name="Weights">;



const int NODE_TYPE_SPAWN = 0x0; 
const int NODE_TYPE_MODEL = 0x3;
const int NODE_TYPE_LIGHT = 0x4; 
const int NODE_TYPE_Matrix_Animation = 0x1C;
const int NODE_TYPE_Matrix_TRIGGER = 0x1F; 


typedef struct {
  float x;
  float y;
  float z;
} VECTOR_3F;

typedef struct {
  float x;
  float y;
  float z;
  float w;
} VECTOR_4F;

LittleEndian();

UINT version;
UINT nodeNum;
UINT C;
UINT nodeNum2;

void readNode3() {
    uint b15; 
    uint num;
    struct {
      uint b17;
      uint b18; 
    } k[num];
    if (version >= 5)
    {
      uint b19;  
      uint b20;
      uint b21;  
      uint b22;
      uint b23;
      uint b24;  
    };
    if (version >= 47)
    {
      uint b25;
      uint b26;
    }
};

typedef struct { 
    uint type;
    uint index;
    uint parentIndex;
    UINT Length;
    char NodeName[Length]; 

    VECTOR_3F coordinates;
    VECTOR_3F normal;
    VECTOR_4F orientation; 

    if (version >= 6) {
      uint b1;
      uint b2;
      uint b3;
    };
    uint b4; 
    uint num00;  
 
    struct {
      dhfdh();
    } obj[num00] <optimize=false>;

    UINT num;
    struct {
      UINT Length;
      char Name3[Length]; 
      uint b1;
      uint b2;
      uint b3;      
      uint b4;
      uint b5[3];
      uint b6[3];
      uint b7;
      uint b8;

      if (version >= 2) {
        uint b9;
        uint b10;
        uint b11;
        uint b12;
        uint b13;
        uint b14;
      };
      if (version >= 6) {
        uint b15;
        uint b16;
        uint b17;
      }
     if (version >= 11) {
        uint b18;
        uint b19;
     };
    } obj1[num] <optimize=false>;

    UINT num2;
    struct {
      UINT C;
      if (version >= 15) {
        UINT Length;
        char Name[Length];
        UINT Length;
        char Name2[Length];
      }  
      UINT Length;
      char Name3[Length];
   } u3[num2] <optimize=false>;

    uint b9;
    uint b10;  
    uint b11;
    uint b12;
    uint b13;
    uint b14;     
    uint b15;
    UINT b16;

    float b17;
    uint b18;
    uint b19;

    if (version >= 46)
    {
      uint b20;
      struct {
        ubyte bn;
        ubyte b22;
        if (version >= 50)
          ubyte b22;
        UINT b16;
        UINT num;
        uint d13[num/4];

        switch (bn) {
          case 2:
           UINT b16;
            break;
          case 3:
            UINT b16;
            UINT b16;
            break;
          case 4:
          case 5:
            UINT b16;
            UINT b16;
            UINT b16;
            UINT b16;
            break;
        }
      } y[b20];
    };

    switch (type) 
    {
      case 0:

          break;
      case 2:
        uint b15;
        uint b16;
        uint b17;
        if (version > 36) {
          uint b;
          uint b;
          uint b;

          uint b18;
          uint b19;  
          uint b20; 
          uint b21;
          uint b22;
          uint b22;
          uint b23;
          uint b24;
          if (version > 41)
          uint b25;
        } else {
          uint b18;
          uint b19;  
          uint b20;  
        }
        
        break;
      case 3:    
        readNode3();
        break;
      case NODE_TYPE_LIGHT:
          uint b15;
          uint b160[4];
          uint b170[4];
          uint b180[4];
          uint b19;
 
          if (version >= 55) {
              uint b;
              uint b;
              uint b;
          }
          uint b;
          uint b;
          uint b;     
          uint b;
          uint b;
        break;
      case 5:
        uint b14; 
        uint num;
        struct {
          uint n; 
          uint b;
          UINT Length;
          char Name[Length];
       } u3[num] <optimize=false>;

        uint b16;
        uint b17; 
        uint b18;
        if (version > 42)
          uint b19;
        break;
      case 7:
        float b15;
        float b16;
        float b17;
        float b18;
    
        uint b19; 
        float b20;
        float b21;
        float b22;

        uint b23;
        uint b24;
        uint b25;
        float b26; 
        float b27;

        if (version > 10)
        {
          uint b28;
          float b29;
          float b30;
          float b31;
          float b32;
          float b27;
        }

        float b27;
        break;
      case 9:
        uint b15;
        uint b16;
        uint b17;

          UINT Length;
          char Name00[Length];

        break;
      case 10:
        uint b15;
        uint b16;
        uint b17;
        uint b18; 

        if (version >= 35)
        {
          uint b19;
          uint b20;
          uint b21;
          uint b22;

          uint b23;
          uint b24;
         uint b25;
        }

 
        break;
      case 11:
        uint b15;
        uint b16;
        uint b17;
        uint b18;

        uint num;
        struct {
           uint b1;
           uint length;
           char Name0[length];
           UINT length;
           char Name[length];
           UINT length;
           char Name1[length];
           float b;
        } u2[num] <optimize=false>;      

        if (version >= 48)
        {
          uint b27;
         uint b27;
        };
        break;
      case 12:
        uint b15;
        uint b16;
        uint b17;
        uint b18; 
        uint b19;
        uint b20;
        uint b21;
        uint b22;
        uint b23;
        uint b24;
        uint b25;
        uint b26; 

        if (version >= 36)
        {
          uint b27;
        }; 

        if (version >= 26)
        {
          UINT Length;
          char Name13[Length];
        };

        if (version >= 54)
        {
          uint b28;
        };

        switch (b15) 
        {
          case 0:
            uint b29;
            uint b30;
            break;
          case 1:
            uint b29;
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            uint b34;
            uint b35; 
            uint b36;

            uint num;
            struct {
              uint b;
              uint b;
              uint b; 
              uint b;
            } asdf[num];

            uint b37;
            break;
          case 2:
            uint b29;
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            break;
          case 3:
            uint b29;
            uint b30;
            uint b31;
            break;
          case 4:
            uint b29;
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            uint b34;
            uint b35; 
            if (version >= 14)
            {
              uint b36;
              uint b37;
              uint b38;
              uint b39;
              uint b40;
              uint b41;
              uint b42;
              uint b43;
              uint b44;
              uint b45;
              uint b46;
              uint b47;
              uint b48;
              uint b49;
            };

            if (version >= 26)
            {
              UINT Length;
              char Name13[Length];
            };
            break;
          case 5:
            uint num;
            struct {
              uint b;
              uint b;
              uint b; 
            } asdf[num];
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            uint b34;
            uint b35;
            uint b36;
            uint b37;
            break;
          case 6:
            uint b29;
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            break;
          case 7:
            uint b29;
            uint b30;
            uint b31;
            uint num;
            struct {
              uint b;
              uint b;
              uint b; 
              uint b;
            } asdf[num];
            uint b32;
            uint b33;
            uint b34;
            uint b35;
            break;
          case 8:
            uint num;
            struct {
              uint b;
              uint b;
              uint b; 
              uint b;
            } asdf[num];
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            uint b34;
            uint b35;
            uint b36;
            uint b37;
            uint b38;
            uint b39;
            uint b40;
            uint b41;
            uint b42;
            uint b43;
            uint b44;
            uint b45;
            uint b46;
            break;
          case 9:
            uint num;
            struct {
              uint b;
              uint b;
              uint b; 
              uint b;
            } asdf[num];
            uint b30;
            uint b31;
            uint b32;
            uint b33;
            break; 
        };
        break;
      case 13:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;
        uint b23;

        uint b24[3];
        if (version >= 3)
        {
            uint b25;
            uint b26;
            uint b27;
            uint b28;
            uint b29;
         };

        if (version >= 9)
        {
          uint b30;
          uint b30;
          uint b31;
          uint b32;
          uint b33;
        };

        uint b34;

        if (version >= 25)
          uint b35;

        if (version >= 28)
        {
            uint b36;
            uint b37;
            uint b38[3];
            uint b39[3];
            uint b40[3];
            uint b41[4];
            uint b42[4];
         };
        break;
      case 15:
        uint b151[6];
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        break;
      case 16:
        uint b15;
        float b16;
        float b17;
        float b18;

        if (version >= 4)
        {        
          float b19;
          float b20;
          float b21;
          float b22;
          float b23;
          float b24;
          float b25;
          float b26;
          float b27;
          float b28;
          float b29;
          float b30;
          float b31;
          float b32;
          float b33;
        };

        if (version >= 14)
        {
          float b34;
          float b35;
        }

        if (version >= 25)
        {
          float b36;
          float b37;
          float b38;
          float b39;
          float b40;
        }

       if (version >= 29)
          uint b41;
       if (version >= 41)
        {
          uint b42[32];
          float b43;
          float b44;
          float b45;
        }

        if (version >= 41)
        {
          float b46;
          float b47;
          float b48;
          float b49;
          float b50;
          float b51;
          float b52;
        }

        if (version >= 42)
        {
          float b53;
          float b54;
        }

        if (version >= 49)
        {
          float b55;
          float b56;
        }
        
        break;
      case 17:
        readNode3();
        uint b27;
        uint b28;  
      
        uint num; 
        struct {
          INT b29; 
          INT b30; 
          INT b31;  
          if (version >= 37) {
            UINT Length;
            char Name[Length];
          };
        } u3[num] <optimize=false>;

        if (version >= 42) {              
          uint b32;
          uint num;

          struct {
            INT b33; 
            if (b33 != 0) {
              INT b34; 
              UINT Length;
              char Name2[Length];
              UINT Length;
              char Name0[Length];
              INT b35; 
              INT b36; 
              INT b37; 
            };
          } u0[num] <optimize=false>;
        };
        break;
      case 19:
        if (version >= 26)  
          uint b15;
        if (version >= 27)  
          uint b16;
        if (version >= 26) {  
          uint b17;
          uint b18;  
          uint b19;
          uint b20;
          uint b21;
          uint b22;  
          uint b23;
          uint b24;
          uint b25;
          uint b26;  
          uint b27;
          UINT Length;
          char Name1[Length]; 
          UINT Length;
          char Name3[Length];   
        };
        break;
      case 18:  
        readNode3();
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;
        uint b;  
        break;
      case 20:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        break;
      case 21:
        uint b15;
        uint b16;
        uint b17;
        uint b18;   
        uint b19;
        if (version >= 8)
        {
          uint num00;
          struct {
             UINT Length;
             char Name[Length];
             uint b;
             uint b;
            if (version >= 23)
              uint b23;
            if (version >= 24)
              uint b22;
            if (version >= 33) 
              uint b23;
          } ap2[num00] <optimize=false>;
          uint b20;     
          uint b21;   
          uint b22;
        };

        if (version >= 19) 
          uint b23;
        if (version >= 20)
          uint b24;
        if (version >= 23)
          uint b25;
        if (version >= 34) 
          uint b26;  
        if (version >= 33)
          uint b27; 
    
        if (version >= 32) 
          uint b28;
        if (version >= 33) 
          uint b29;

        break;
      case 24:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;

        break;
      case 25:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;

        if (version >= 12)
        {
          uint num;
          struct {
            float b;
            uint b;
            uint b;
            float b;
          } a[num];

          uint b23;
          uint b241;
          uint b25;
        } 

        if (version >= 13)
        {
          uint num;
          struct {
            float b;
            uint b;
            uint b;
            float b;
          } a2[num];
        } 
        if (version >= 16)
          uint b26;
        if (version >= 16)   
          uint b271;
        if (version >= 18)
          uint b28;
        if (version >= 53)
          uint b29; 
        break;
      case 26:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;
        break;
      case 27:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;
        break;
      case 29:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21; 
        uint b22; 
        if (version >= 19)
        {
          uint b23;
          uint b24; 
          uint b25; 
        };  
        if (version >= 27)
        {
          uint b26;
          uint b27;  
        };    
        if (version >= 19)
        {
          uint b28;
          uint b29; 
        };  
        if (version >= 27)
        {
          uint b30;  
        }; 

        if (version >= 19)
        {
          uint num;
          struct {
              uint b32; 
              uint b33; 
              uint b34;
              uint b35;
          } t00[num];  
        };

        if (version >= 19)
        {
          uint b36;  
          uint b37;
          uint b38;  
        };  

        if (version >= 13) {
          uint num;
          struct {
              uint b32; 
              uint b33; 
              uint b34;
              uint b35;
          } t[num]; 
        };
        if (version >= 21) 
          uint b32; 
        if (version >= 21)
          uint b33; 
        if (version >= 41)
          uint b34;
        if (version >= 45)
          uint b33; 
        if (version >= 45)
          uint b34;
        if (version >= 45)
          uint b35;
        break;
      case NODE_TYPE_Matrix_Animation:
        uint b153[3];
        uint b16;
        uint b17;
        uint b18;
        uint b19;  
        uint b20;
        uint b21;  

        uint num;
        struct {
          uint b22[3];
          uint b23[3];
          uint b24[3];
          uint b25[3];
          uint b26[3];  
          uint b27[3];

          uint b28[3];
          uint b29[3];  
          uint b320[3];
          uint b31[3];
        } ui[num];
        break;
      case NODE_TYPE_Matrix_TRIGGER:
        if (version > 21)  {
          uint b15;
          uint b16;
        }
        break;
      case 30:
        uint b14;
        uint b15; 
        uint b16;
        uint b17;
        uint b18;
        uint b19; 
        uint b20;
        uint b21;

        if (version > 41)  {
          uint num;

          struct {
            UINT Length;
            char name[Length];
            float b;
            float b;
            float b;
            float b;
            float b;
            float b;
            float b;
            float b;
          } u2[num] <optimize=false>; 
 
        }
        break;
      case 32:
        uint b15;
        uint b16;
        uint b17;
        uint b18;
        uint b19;
        uint b20;
        uint b21;
        uint b22;
        break;
      case 33:
        uint b15;
        uint b16;
        uint b17;

        uint b18;
        break;
      case 34:
        uint b15;
        uint b16;
        uint b17;

        uint b18;
        break;
      case 35:
        float b15;
        UINT Length;
        char Name3[Length]; 
        UINT b17;
        UINT b18;
        UINT b191[4];
        UINT b29;
        UINT b21;
        break;
      case 36:
        UINT b15;
        UINT b16;
        UINT b17;
        UINT b18;
        if (version >= 26)  {
          UINT b29[4];
          UINT b30;
        }
        if (version >= 30)
          UINT b31;
        if (version >= 30) 
          UINT b32;
        break;
      case 38:
        float b20;
        UINT b21;
        UINT b22;
        UINT b23;
        break;
    };
 
  } NODE <optimize=false, name=getName()>;

NODE Node[nodeNum];


string getName() {
  return this.NodeName;
}
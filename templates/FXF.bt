//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint a = 0;

const uint TEXTURE = 0;
const uint OBJECT = 1;
const uint SOUND = 2;
const uint MATERIAL = 4;
const uint CHARACTER_ANIMATION = 6;
const uint FONT = 7;

typedef struct {
  UINT Length;
  CHAR Text[Length];
} CSTRING;

struct {
  UINT Version;
  FLOAT Unknown;
  UINT EmptyData[4];
  UINT SectionCount;
} HEADER;

struct {
  UINT Count;
  struct {
    CSTRING Name;   
  } DATA0[Count] <optimize=false>;
} NAMES[HEADER.SectionCount] <optimize=false>;


UINT Count;
typedef struct {
    UINT type;
    UINT Index;
    //
    UINT UnknownA;
    CSTRING Name; 
    CSTRING FileName;
    CSTRING Path; 
    switch (type) {
      case TEXTURE:
          UINT A;
          UINT A;
          struct {
             UINT A;
             UINT A;
             UINT A;
             UINT A;
             UINT A;
             UINT A;
          } DATA;
        break; 
      case OBJECT:
        UINT A;
        UINT A;
        struct { 
          UINT num; 
          struct {
             UINT A;
             UINT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;   
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A;
             FLOAT A; 
             FLOAT A;
             FLOAT A;     
          } B[num];
          UINT A;
          UINT A;
        } DATA; 
        break;
      case SOUND:
        struct { 
          BYTE Data[20] <optimize=false>;
        } DATA; 
        break;
      case MATERIAL:
        UINT A; 
        UINT A; 
        struct { 
          UINT A[17];
          UINT B;  
          UINT B;
          UINT A1;
          UINT num;
          UINT AA[num];
          UINT B;  
          UINT B;
          UINT A1;
          UINT B;  
          UINT B;
          UINT A1;   
          UINT B;
          UINT A1;  
          UINT B;
          UINT A1; 
        } DATA;

        a += 1;  
        break;
      case CHARACTER_ANIMATION:
        struct { 
          BYTE Data[12] ;
        } DATA;
        break;
      case FONT:
        UINT A1;
        UINT A2;
        struct { 
          CSTRING Name;   
          CSTRING Name;   
          UINT A3; 
          UINT A3; 
          UINT A3; 
          UINT b;
          UINT A3; 
          if (b != -1) {
            UINT n; 
            UINT A3; 
            UINT A3; 
            UINT z;
            UINT A32; 
            char text[256];
            struct {
              FLOAT A[4];
            } a[z];
          };
        } DATA;
        break;
    }; 
} NODE <optimize=false>;

NODE D[Count] <name=getName()>;

string getName() {
  if (exists(this.FileName.Text))
    return this.FileName.Text;
  else
    return this.Name.Text;
}

Printf("%u", a);
//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

const uint TEXTURE = 0;
const uint MODEL = 1;
const uint SOUND = 2;
const uint MATERIAL = 4;
const uint CHARACTER_ANIMATION = 6;
const uint FONT = 7;

typedef struct {
  UINT Length;
  CHAR Text[Length];
} CSTRING;

struct {
  UINT Version;
  FLOAT Unknown;
  UINT EmptyData[4];
  UINT SectionCount;
} HEADER;

struct {
  UINT Count;
  struct {
    CSTRING Name;   
  } LIST[Count] <optimize=false>;
} NAMES[HEADER.SectionCount] <optimize=false>;


UINT Count;
typedef struct {
    UINT type;
    UINT Index;
    //
    UINT groupIndex;

    CSTRING Name; 
    CSTRING FileName;
    CSTRING Path; 
    UINT Un; 
    UINT Un; 

    switch (type) {
      case TEXTURE:
          struct {
             UINT Un;
             UINT Un;
             UINT Un;
             UINT Un;
             UINT Un;
             UINT Un;
          } DATA;
        break; 
      case MODEL:
        struct { 
          UINT num; 
          struct {
             UINT Un;
             UINT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;   
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un;
             FLOAT Un; 
             FLOAT Un;
             FLOAT Un;     
          } B[num];
          UINT Un;
          UINT Un;
        } DATA; 
        break;
      case SOUND:
        struct { 
          UINT Un[3] <optimize=false>;
        } DATA; 
        break;
      case MATERIAL:
        struct { 
          FLOAT Un[17];
          UINT Un;  
          UINT Un;
          UINT Un;
          UINT textureNum;
          UINT texIndex[textureNum];
          UINT Un;  
          UINT Un;
          UINT Un;
          UINT Un;  
          UINT Un;
          UINT Un;   
          UINT Un;
          UINT Un;  
          UINT Un;
          UINT Un; 
        } DATA;
        break;
      case CHARACTER_ANIMATION:
        struct { 
           UINT Un;
        } DATA;
        break;
      case FONT:
        struct { 
          CSTRING Name;   
          CSTRING Name;   
          UINT Un; 
          UINT Un; 
          UINT Un; 
          UINT b;
          UINT Un; 
          if (b != -1) {
            UINT n; 
            UINT Un; 
            UINT Un; 
            UINT num;
            UINT Un; 
            char text[256];
            struct {
              FLOAT A[4];
            } a[num];
          };
        } DATA;
        break;
    }; 
} NODE <optimize=false>;

NODE D[Count] <name=getName()>;

string getName() {
  string str, nameStr;

  if (exists(this.FileName.Text))
    nameStr = this.FileName.Text;
  else
    nameStr = this.Name.Text;

  SPrintf(str, "%s: %s", NAMES[this.type].LIST[this.groupIndex].Name.Text, nameStr);
  
 
    return  str;
}